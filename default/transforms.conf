# The Metrics log lines use a comma to break up events
# 9/11/17 8:47:13.635 PM 09-11-2017 20:47:13.635 +0100 INFO  Metrics - group=thruput, name=thruput
[build_metric_names_metrics]
REGEX= (INFO  (Metrics) - group=([a-zA-Z_\-]+))(, name=([a-zA-Z_][a-zA-Z_0-9]*))?(, )?(.*)
FORMAT = $2.$3.$5#$7
DEST_KEY = _raw

# The License log lines use a space to break up events
# 09-11-2017 20:34:42.653 +0100 INFO  LicenseUsage - type=Usage s=looper st=splunk_metric h="rmorgan-mbp" o="" idx="main" i="2ECD2EBB-03A2-4C2A-AFD3-BBEE939E99D0" pool="auto_generated_pool_download-trial" b=49535 poolsz=524288000
[build_metric_names_license_usage]
REGEX = (INFO  (LicenseUsage) - )(.*)$
FORMAT = $2#$3
DEST_KEY = _raw

# Any key=value pair where the "value" is not a number we want to add this to the _meta
# so that they will become dimensions for how the data can be cut
[extract_dimensions]
REGEX = \s([a-zA-Z_]+)="?([a-zA-Z_/][a-zA-Z0-9_/\-\.]*)"?
WRITE_META = true
REPEAT_MATCH = true
FORMAT = $1::$2

# This popping transform assumes that the delim is a comma
# When we can pop no more we are "finished"
[pop_with_comma]
REGEX = ^([^#]+)#([a-zA-Z_\-\.]+)="?([^,]+)"?, (.+)$
FORMAT = $1#$4
DEFAULT_VALUE = finished
DEST_KEY = _raw

# This popping transform assumes that the delim is a space
# When we can pop no more we are "finished"
[pop_with_space]
REGEX = ^([^#]+)#([a-zA-Z_\-\.]+)="?([^ ]+)"? (.+)$
FORMAT = $1#$4
DEFAULT_VALUE = finished
DEST_KEY = _raw

# This transform performs the actual clone, it does not modify the event in any way.
# If this only cloned when the regex matched, it would reduce the number of unnecessary clones
[clone]
REGEX = (never match)
DEST_KEY = _raw
CLONE_SOURCETYPE = splunk_metric

# We need to change the sourcetype as it is too confusing to allow the clones to hit the same stanza
# The new source is not used for any logic
[change_source]
REGEX = (.*)
SOURCE_KEY = MetaData:Source
DEST_KEY = MetaData:Source
FORMAT = source::looper

# The last function to call, this parses the current metric and assigns its value to value
# and builds its metric name. Attribute is added to help search. After this, teh event is 
# ready for the metrics index
[make_metric]
REGEX = ([^#]+)#([^=]+)=([^,]*)
WRITE_META = true
FORMAT = metric_name::$1.$2 _value::$3 attribute::$2

# Elements that have no more variables to 'pop' set themselves as "finished", we have 
# to intercept these and route to null
[drop-finished]
SOURCE_KEY = _raw
REGEX = ^finished$
DEST_KEY = queue
FORMAT = nullQueue

# All events with _values that are just numbers should routed into the metrics index
# The remaining events will be remain on the path metrics_internal_spam
[reroute-numbers]
SOURCE_KEY = _meta
REGEX = _value::\d+(\.\d+)?
DEST_KEY = _MetaData:Index
FORMAT = metrics_internal

# By default we send all data to the metrics_internal_spam, anything that can be 
# successfully extracted as a number will be will be routed to a real metrics store
[set_index_metrics]
REGEX = .
DEST_KEY = _MetaData:Index
FORMAT = metrics_internal_spam

# helpful to debug what is in the _meta queue
[print_meta]
REGEX = ^(.*)$
SOURCE_KEY = _meta
DEST_KEY = _raw
FORMAT = $1

